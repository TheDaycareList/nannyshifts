"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var observable_array_1 = require("data/observable-array");
var dialogs = require("ui/dialogs");
var appSettings = require("application-settings");
var moment = require("moment");
var frame = require("ui/frame");
var user_service_1 = require("../shared/user.service");
var shift_service_1 = require("../shared/shift.service");
var InvoiceModel = (function (_super) {
    __extends(InvoiceModel, _super);
    function InvoiceModel(invoice) {
        var _this = _super.call(this) || this;
        _this.loading = false;
        _this.sentTimes = new observable_array_1.ObservableArray([]);
        _this.user = JSON.parse(appSettings.getString('userData'));
        _this.userService = new user_service_1.UserService();
        _this.shiftService = new shift_service_1.ShiftService();
        if (invoice.sent_times && invoice.sent_times.length) {
            for (var i = 0; invoice.sent_times.length > i; i++) {
                //invoice.sent_times[i] = moment(invoice.sent_times[i]).format('MMMM Do [at] h:mma');
                _this.sentTimes.push(moment(invoice.sent_times[i]).format('MMMM Do [at] h:mma'));
            }
        }
        if (invoice.shifts && invoice.shifts.length) {
            for (var s = 0; invoice.shifts.length > s; s++) {
                invoice.shifts[s].this_family_name = invoice.family_name;
                invoice.shifts[s].this_family_contribution = invoice.shifts[s].contributions[invoice.family_id];
            }
        }
        _this.set('invoice', observable_1.fromObject(invoice));
        _this.set('paid', invoice.paid);
        _this.set('sent', invoice.sent);
        return _this;
    }
    InvoiceModel.prototype.invoiceOptions = function (args) {
        var _this = this;
        var actions = [];
        if (!this.get('paid')) {
            actions.push('Mark As Paid');
        }
        else {
            actions.push('Unmark As Paid');
        }
        if (!this.invoice.get('sent')) {
            actions.push('Send to ' + this.invoice.get('family_name'));
            actions.push('Edit');
        }
        else {
            if (!this.get('paid'))
                actions.push('Re-send to ' + this.invoice.get('family_name'));
        }
        actions.push('Delete');
        dialogs.action(this.invoice.get('family_name') + ' for $' + this.invoice.get('total'), "Cancel", actions).then(function (result) {
            if (result == 'Edit') {
                //this.showEditShift(false, shift);
            }
            else if (result == 'Delete') {
                var msg_1 = 'Are you sure you want to delete this invoice?';
                if (_this.get('paid')) {
                    msg_1 += ' You\'ve marked this invoice as paid, so remember to adjust your records accordingly.';
                }
                else if (_this.invoice.get('sent')) {
                    msg_1 += ' You\'ve already sent this invoice to ' + _this.invoice.get('family_name') + ', so please reach out to them directly informing them that they can discard this invoice.';
                }
                dialogs.action(msg_1, "Cancel", ["Do it."]).then(function (result) {
                    if (result == 'Do it.') {
                        // this.shiftService.deleteShift(shift.id).then(result => {
                        //     this.processShifts(JSON.parse(appSettings.getString('shifts')));
                        // })
                    }
                });
            }
            else if (result == 'Mark As Paid') {
                _this.set('loading', true);
                _this.shiftService.updateInvoice(_this.invoice.get('id'), { paid: true }).then(function (result) {
                    _this.set('loading', false);
                    _this.set('paid', true);
                });
            }
            else if (result == 'Unmark As Paid') {
                _this.set('loading', true);
                _this.shiftService.updateInvoice(_this.invoice.get('id'), { paid: false }).then(function (result) {
                    _this.set('loading', false);
                    _this.set('paid', false);
                });
            }
            else if (result == 'Send to ' + _this.invoice.get('family_name')) {
                _this.set('loading', true);
                _this.sendInvoice();
                var sentTimes = [moment().format()];
                _this.shiftService.updateInvoice(_this.invoice.get('id'), { sent: true, sent_times: sentTimes }).then(function (result) {
                    _this.set('sent', true);
                    alert('The invoice has been sent!');
                    _this.set('loading', false);
                    _this.invoice.set('sent', true);
                    _this.sentTimes.push(moment().format('MMMM Do [at] h:mma'));
                });
            }
            else if (result == 'Re-send to ' + _this.invoice.get('family_name')) {
                _this.sendInvoice(true);
                var sentTimes_1 = [moment().format()];
                if (_this.invoice.get('sent_times') && _this.invoice.get('sent_times').length) {
                    sentTimes_1 = _this.invoice.get('sent_times');
                    sentTimes_1.push(moment().format());
                }
                _this.set('loading', true);
                _this.shiftService.updateInvoice(_this.invoice.get('id'), { sent: true, sent_times: sentTimes_1 }).then(function (result) {
                    _this.invoice.set('sent', true);
                    _this.set('sent', true);
                    _this.invoice.set('sent_times', sentTimes_1);
                    _this.sentTimes.push(moment().format('MMMM Do [at] h:mma'));
                    _this.set('loading', false);
                    alert('We sent a friendly reminder to ' + _this.invoice.get('family_name'));
                });
            }
        });
    };
    InvoiceModel.prototype.sendInvoice = function (resending) {
        var html = this.buildInvoiceHtml();
        var message = this.user.first_name + ' ' + this.user.last_name + ' created the invoice below, send payment as soon as you can.';
        var subject = this.user.first_name + ' ' + this.user.last_name + ' has sent you an invoice.';
        if (resending) {
            message = this.user.first_name + ' ' + this.user.last_name + ' previously sent the invoice below, here\'s a friendly reminder to send payment as soon as you can.';
            subject = this.user.first_name + ' ' + this.user.last_name + ' is sending you a friendly reminder about an unpaid invoice.';
        }
        var familyToInvoice = this.invoice.get('family');
        this.userService.sendEmail(familyToInvoice, { email: this.user.email, name: this.user.first_name + ' ' + this.user.last_name }, message, html, subject);
    };
    InvoiceModel.prototype.buildInvoiceHtml = function () {
        var html = "\n            <center><span style=\"color: gray; font-size: 11px; color: gray;\">Invoice ID: " + this.invoice.get('id') + "</span></center>\n            <table width=\"100%\" style=\"font-family: Helvetica; font-size: 13px;\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                    <th align=\"left\" width=\"100%\" style=\"padding: 5; border-bottom: 2px solid #E0E0E0;\">Shifts</th>\n                    <th align=\"left\" style=\"padding: 5; border-bottom: 2px solid #E0E0E0;\">Contribution</th>\n                </tr>\n        ";
        for (var i = 0; this.get('invoice').shifts.length > i; i++) {
            var shift = this.get('invoice').shifts[i];
            html += "\n                <tr>\n                    <td align=\"left\" style=\"padding: 5; border-bottom: 1px solid #f5f5f5;\">" + shift.display_date + "<br /><span style=\"font-size: 11px; color: gray;\">" + shift.display_timing + "</span></td>\n                    <td align=\"left\" style=\"padding: 5; border-bottom: 1px solid #f5f5f5; font-weight: bold;\">$" + shift.contributions[this.invoice.get('family_id')] + "</td>\n                </tr>\n            ";
        }
        html += "\n                \n            </table>\n            <center><h2 style=\"font-family: Helvetica;\">Invoice Total: <span style=\"color: green;\">$" + this.invoice.get('total') + "</span></h2></center>\n        ";
        return html;
    };
    InvoiceModel.prototype.goback = function () {
        frame.topmost().goBack();
    };
    return InvoiceModel;
}(observable_1.Observable));
exports.InvoiceModel = InvoiceModel;
//# sourceMappingURL=data:application/json;base64,