"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var appSettings = require("application-settings");
var http = require("http");
var config_1 = require("../../config");
var UserService = (function () {
    function UserService() {
    }
    UserService.prototype.getUser = function (uid) {
        return new Promise(function (resolve, reject) {
            firebase.query(function (queryResult) {
                var user;
                if (queryResult.value) {
                    for (var i in queryResult.value) {
                        user = queryResult.value;
                    }
                }
                if (user) {
                    if (user.families) {
                        for (var x in user.families) {
                            if (user.families[x].deleted) {
                                delete user.families[x];
                            }
                            else {
                                user.families[x].id = x;
                            }
                        }
                    }
                    appSettings.setString('userData', JSON.stringify(user));
                    resolve(user);
                }
                else {
                    reject("No user found.");
                }
            }, '/users/' + uid, {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'date_created'
                }
            });
        });
    };
    UserService.prototype.updateUser = function (data) {
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                console.dir(data);
                firebase.update('/users/' + uid, data).then(function (result) {
                    // the result here is always undefined.
                    var savedUser = JSON.parse(appSettings.getString('userData'));
                    for (var i in data)
                        savedUser[i] = data[i];
                    appSettings.setString('userData', JSON.stringify(savedUser));
                    resolve(savedUser);
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.addFamily = function (data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.push('/users/' + uid + '/families', data).then(function (result) {
                    _this.getUser(uid).then(function () {
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.sendEmail = function (to, from, title, msg, subject) {
        var emailContent = {
            "personalizations": [
                {
                    "to": [
                        {
                            "email": to.email,
                            "name": to.name
                        }
                    ],
                    "subject": subject
                }
            ],
            "from": {
                "email": from.email,
                "name": from.name
            },
            "reply_to": {
                "email": from.email,
                "name": from.name
            },
            "subject": subject,
            "content": [
                {
                    "type": "text/html",
                    "value": '<html><p><div style="max-width: 600px; margin: auto; font-family: Helvetica;"><center><img src="https://dev.dailynannyapp.com/images/nannyshifts_logo.png" style="width: 200px;"/><br /><h2>' + title + '</h2><span style="font-size: 16px; font-weight: 300; line-height: 20px;">' + msg + '</span><br /><br /><span style="font-size: 11px; color: gray;">Just reply to this email with questions or comments.<br/><br/><a href="http://nannyshifts.com">nannyshifts.com</a></span></center></div></p></html>'
                }
            ]
        };
        var options = {
            url: 'https://api.sendgrid.com/v3/mail/send',
            method: 'post',
            headers: {
                "authorization": "bearer " + config_1.default.sendGridApiKey,
                "Content-Type": "application/json"
            },
            content: JSON.stringify(emailContent)
        };
        console.log('about to send email to ' + to.email);
        return http.request(options).then(function (result) {
            //console.dir(result);
        });
    };
    UserService.prototype.saveFamily = function (id, data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.setValue('/users/' + uid + '/families/' + id, data).then(function (result) {
                    // update the saved user.
                    _this.getUser(uid).then(function () {
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.updateFamily = function (id, data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.update('/users/' + uid + '/families/' + id, data).then(function (result) {
                    // update the saved user.
                    _this.getUser(uid).then(function () {
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,