"use strict";
var firebase = require("nativescript-plugin-firebase");
var appSettings = require("application-settings");
var UserService = (function () {
    function UserService() {
    }
    UserService.prototype.getUser = function (uid) {
        return new Promise(function (resolve, reject) {
            firebase.query(function (queryResult) {
                var user;
                if (queryResult.value) {
                    for (var i in queryResult.value) {
                        user = queryResult.value;
                    }
                }
                if (user) {
                    console.dump(user);
                    appSettings.setString('userData', JSON.stringify(user));
                    resolve(user);
                }
                else {
                    reject("No user found.");
                }
            }, '/users/' + uid, {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'date_created'
                }
            });
        });
    };
    UserService.prototype.updateUser = function (data) {
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.update('/users/' + uid, data).then(function (result) {
                    // the result here is always undefined.
                    var savedUser = JSON.parse(appSettings.getString('userData'));
                    for (var i in data)
                        savedUser[i] = data[i];
                    appSettings.setString('userData', JSON.stringify(savedUser));
                    console.log('in update result');
                    console.log('about to resolve');
                    resolve(savedUser);
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.addFamily = function (data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.push('/users/' + uid + '/families', data).then(function (result) {
                    _this.getUser(uid).then(function () {
                        console.dump(result);
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.saveFamily = function (id, data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.setValue('/users/' + uid + '/families/' + id, data).then(function (result) {
                    console.dump(result);
                    // update the saved user.
                    _this.getUser(uid).then(function () {
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    UserService.prototype.updateFamily = function (id, data) {
        var _this = this;
        var uid = JSON.parse(appSettings.getString('uid'));
        console.log(uid);
        return new Promise(function (resolve, reject) {
            if (uid) {
                firebase.update('/users/' + uid + '/families/' + id, data).then(function (result) {
                    console.dump(result);
                    // update the saved user.
                    _this.getUser(uid).then(function () {
                        resolve(result);
                    });
                });
            }
            else {
                reject('Couldn\'t find the user record ID.');
            }
        });
    };
    return UserService;
}());
exports.UserService = UserService;
//# sourceMappingURL=data:application/json;base64,