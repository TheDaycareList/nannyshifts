"use strict";
var observable_1 = require("data/observable");
var home_model_1 = require("./home-model");
var gestures_1 = require("ui/gestures");
var enums_1 = require("ui/enums");
var platform_1 = require("platform");
var builder = require("ui/builder");
var fs = require("file-system");
var dialogs = require("ui/dialogs");
var user_service_1 = require("../shared/user.service");
var page;
var settingsContainer;
var settingsOverlayContainer;
var dismissNote;
var blurView = false;
var userService;
function loaded(args) {
    page = args.object;
    userService = new user_service_1.UserService();
    settingsContainer = page.getViewById('settings_container');
    settingsOverlayContainer = page.getViewById('settings_overlay_container');
    dismissNote = page.getViewById('dismiss_note');
    var buzz = UISelectionFeedbackGenerator.new();
    settingsContainer.on(gestures_1.GestureTypes.pan, function (args) {
        //console.log("Pan deltaX:" + args.deltaX + "; deltaY:" + args.deltaY + ";");
        settingsContainer.translateY = args.deltaY;
        if (args.deltaY > 150) {
            if (dismissNote.opacity == 0) {
                buzz.selectionChanged();
                dismissNote.animate({
                    opacity: 1,
                    duration: 250
                });
            }
        }
        else {
            if (dismissNote.opacity == 1) {
                dismissNote.animate({
                    opacity: 0,
                    duration: 250
                });
            }
        }
        if (args.state == 3) {
            if (args.deltaY > 150) {
                settingsContainer.animate({
                    translate: { x: 0, y: 1000 },
                    duration: 500,
                    curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
                }).then(function () {
                    page.bindingContext.set('settingsShown', false);
                    settingsContainer.translateY = 0;
                    dismissNote.opacity = 0;
                });
                settingsOverlayContainer.animate({
                    opacity: 0,
                    duration: 500,
                    curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
                }).then(function () {
                    settingsOverlayContainer.opacity = 1;
                });
            }
            else {
                settingsContainer.animate({
                    translate: { x: 0, y: 0 },
                    duration: 200,
                    curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
                });
            }
        }
        console.log('pulling down ' + args.deltaY + ' points');
    });
    page.bindingContext = new home_model_1.HomeModel();
    page.bindingContext.set('editRates', function () {
        showSettings('/views/components/editrates/editrates.xml');
        page.bindingContext.set('settingsTitle', 'Edit Rates');
    });
    page.bindingContext.set('saveRates', function () {
        console.log(page.bindingContext.get('user').hourlyRate);
        console.log(page.bindingContext.get('user').overtimeRate);
    });
    page.bindingContext.set('editFamily', function (args) {
        var families = page.bindingContext.get('families');
        var family = families.filter(function (item) { return item.id === args.object.id; })[0];
        page.bindingContext.set('editingFamily', family);
        showSettings('/views/components/editfamily/editfamily.xml');
        page.bindingContext.set('settingsTitle', 'Edit Family');
        page.getViewById('family_name').text = family.get('name');
        page.getViewById('family_email').text = family.get('email');
    });
    page.bindingContext.set('addFamily', function () {
        page.bindingContext.set('editingFamily', false);
        showSettings('/views/components/editfamily/editfamily.xml');
        page.bindingContext.set('settingsTitle', 'Add Family');
    });
    page.bindingContext.set('saveFamily', function () {
        var editingFamily = page.bindingContext.get('editingFamily');
        var data = {
            name: page.getViewById('family_name').text,
            email: page.getViewById('family_email').text
        };
        if (editingFamily) {
            userService.saveFamily(editingFamily.get('id'), data).then(function (result) {
                var families = page.bindingContext.get('families');
                families.forEach(function (element) {
                    if (element.get('id') == editingFamily.get('id')) {
                        element.set('name', data.name);
                        element.set('email', data.email);
                    }
                });
                page.bindingContext.hideSettings();
            });
        }
        else {
            var families = page.bindingContext.get('families');
            userService.addFamily(data).then(function (result) {
                var families = page.bindingContext.get('families');
                data.id = result.key;
                families.push(new observable_1.Observable(data));
                page.bindingContext.set('familiesCount', families.length);
                if (families.length == 1) {
                    page.bindingContext.set('justOneFamily', true);
                }
                else {
                    page.bindingContext.set('justOneFamily', false);
                }
                page.bindingContext.hideSettings();
            });
        }
    });
    page.bindingContext.set('removeFamily', function (args) {
        console.log(args.object.id);
        var famId = args.object.id;
        dialogs.confirm('Are you sure you want to remove this family?').then(function (result) {
            if (result) {
                userService.updateFamily(famId, { deleted: true }).then(function (result) {
                    var families = page.bindingContext.get('families');
                    var deleteIndex;
                    families.forEach(function (element, index) {
                        if (element.get('id') == famId)
                            deleteIndex = index;
                    });
                    families.splice(deleteIndex, 1);
                    console.log(families.length);
                    page.bindingContext.set('families', families);
                    page.bindingContext.set('familiesCount', families.length);
                    if (families.length == 1) {
                        page.bindingContext.set('justOneFamily', true);
                    }
                    else {
                        page.bindingContext.set('justOneFamily', false);
                    }
                    page.bindingContext.hideSettings();
                });
            }
        });
    });
    page.bindingContext.set('hideSettings', function () {
        var deviceHeight = platform_1.screen.mainScreen.heightDIPs;
        settingsContainer.animate({
            translate: { x: 0, y: deviceHeight - 30 },
            duration: 300,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        }).then(function () {
            page.bindingContext.set('settingsShown', false);
        });
        settingsOverlayContainer.animate({
            opacity: 0,
            duration: 300
        });
    });
}
exports.loaded = loaded;
function showSettings(viewPath) {
    console.log(viewPath);
    page.bindingContext.set('settingsShown', true);
    var deviceHeight = platform_1.screen.mainScreen.heightDIPs;
    settingsContainer.translateY = deviceHeight + 30;
    settingsContainer.animate({
        translate: { x: 0, y: 0 },
        duration: 300,
        curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
    });
    settingsOverlayContainer.opacity = 0;
    settingsOverlayContainer.animate({
        opacity: 1,
        duration: 100
    });
    var container = page.getViewById('settings_view');
    container.removeChildren();
    var path = fs.knownFolders.currentApp().path;
    var component = builder.load(path + viewPath);
    container.addChild(component);
    var containerBounds = settingsContainer.ios.bounds;
    if (!blurView) {
        blurView = UIVisualEffectView.alloc().initWithEffect(UIBlurEffect.effectWithStyle(UIBlurEffectStyleLight));
        blurView.frame = {
            origin: { x: containerBounds.origin.x, y: containerBounds.origin.y - 20 },
            size: { width: containerBounds.size.width, height: containerBounds.size.height + 20 }
        };
        blurView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
        settingsContainer.ios.addSubview(blurView);
        settingsContainer.ios.sendSubviewToBack(blurView);
    }
}
//# sourceMappingURL=data:application/json;base64,