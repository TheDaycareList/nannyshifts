"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var page_1 = require("ui/page");
var observable_1 = require("data/observable");
var observable_array_1 = require("data/observable-array");
var dialogs = require("ui/dialogs");
var appSettings = require("application-settings");
var frame = require("ui/frame");
var user_service_1 = require("../shared/user.service");
var enums_1 = require("ui/enums");
var userService;
var MyModel;
var UserSetup = (function (_super) {
    __extends(UserSetup, _super);
    function UserSetup() {
        var _this = _super.call(this) || this;
        _this.saving = false;
        _this.families = new observable_array_1.ObservableArray([]);
        _this.addingFamily = false;
        userService = new user_service_1.UserService();
        MyModel = _this;
        return _this;
    }
    UserSetup.prototype.saveRates = function () {
        if (this.hourlyRate && this.overtimeRate && this.families.length) {
            var args = {
                hourlyRate: this.hourlyRate,
                overtimeRate: this.overtimeRate
            };
            userService.updateUser(args).then(function (result) {
                console.log('yay!');
                frame.topmost().navigate({
                    moduleName: '/views/home/home',
                    backstackVisible: false,
                    animated: true,
                    clearHistory: true
                });
            });
        }
        else {
            if (!this.families.length) {
                alert('Please enter at least one family.');
            }
            else {
                alert('Please enter your hourly rate and overtime rate. If they are the same, enter it twice!');
            }
        }
    };
    UserSetup.prototype.showAddFamily = function () {
        var view = frame.topmost().currentPage;
        var dimmer = page_1.getViewById(view, 'dimmer');
        var picker = page_1.getViewById(view, 'chooser_holder');
        this.set('addingFamily', true);
        dimmer.opacity = 0;
        dimmer.animate({
            opacity: 1,
            duration: 500,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
        picker.opacity = 0;
        picker.scaleX = .7;
        picker.scaleY = .7;
        picker.animate({
            opacity: 1,
            scale: { x: 1, y: 1 },
            duration: 300,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
    };
    UserSetup.prototype.addFamily = function () {
        var _this = this;
        var familyObj = {
            name: this.addingFamilyName,
            email: this.addingFamilyEmail
        };
        this.closeAddFamily();
        userService.addFamily(familyObj).then(function (result) {
            familyObj.id = result.key;
            _this.families.push(familyObj);
            var uid = JSON.parse(appSettings.getString('uid'));
            userService.getUser(uid).then(function () {
                _this.set('addingFamilyName', '');
                _this.set('addingFamilyEmail', '');
            });
        });
    };
    UserSetup.prototype.closeAddFamily = function () {
        var _this = this;
        var view = frame.topmost().currentPage;
        var dimmer = page_1.getViewById(view, 'dimmer');
        var picker = page_1.getViewById(view, 'chooser_holder');
        dimmer.animate({
            opacity: 0,
            duration: 500,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        }).then(function () {
            _this.set('addingFamily', false);
        });
        picker.animate({
            opacity: 0,
            scale: { x: .7, y: .7 },
            duration: 300,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
    };
    UserSetup.prototype.alert = function () {
        alert('Hi');
    };
    UserSetup.prototype.removeFamily = function (args) {
        var famId = args.object.id;
        dialogs.confirm('Are you sure you want to remove this family?').then(function (decision) {
            if (decision) {
                userService.updateFamily(famId, { deleted: true }).then(function (result) {
                    var deleteIndex;
                    MyModel.families.forEach(function (element, index) {
                        if (element.id == famId)
                            deleteIndex = index;
                    });
                    MyModel.families.splice(deleteIndex, 1);
                });
            }
        });
    };
    UserSetup.prototype.kill = function () {
        appSettings.remove('userData');
        appSettings.remove('uid');
        appSettings.remove('userRecordID');
        frame.topmost().navigate('/views/login/login');
    };
    return UserSetup;
}(observable_1.Observable));
exports.UserSetup = UserSetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnNldHVwLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXNlcnNldHVwLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0NBQTRDO0FBRTVDLDhDQUE2QztBQUM3QywwREFBd0Q7QUFFeEQsb0NBQXNDO0FBQ3RDLGtEQUFvRDtBQUVwRCxnQ0FBa0M7QUFDbEMsdURBQXFEO0FBRXJELGtDQUEwQztBQUUxQyxJQUFJLFdBQXdCLENBQUM7QUFDN0IsSUFBSSxPQUFrQixDQUFDO0FBRXZCO0lBQStCLDZCQUFVO0lBQ3JDO1FBQUEsWUFDSSxpQkFBTyxTQUdWO1FBTU0sWUFBTSxHQUFZLEtBQUssQ0FBQztRQUN4QixjQUFRLEdBQUcsSUFBSSxrQ0FBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGtCQUFZLEdBQVksS0FBSyxDQUFDO1FBVmpDLFdBQVcsR0FBRyxJQUFJLDBCQUFXLEVBQUUsQ0FBQztRQUNoQyxPQUFPLEdBQUcsS0FBSSxDQUFDOztJQUNuQixDQUFDO0lBWU0sNkJBQVMsR0FBaEI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQy9ELElBQUksSUFBSSxHQUFHO2dCQUNQLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDM0IsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2FBQ2xDLENBQUE7WUFDRCxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07Z0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3BCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBQ3JCLFVBQVUsRUFBRSxrQkFBa0I7b0JBQzlCLGdCQUFnQixFQUFFLEtBQUs7b0JBQ3ZCLFFBQVEsRUFB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aEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsS0FBSzt3QkFDcEMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUM7NEJBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztvQkFDakQsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBO2dCQUMzQyxDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFTSx3QkFBSSxHQUFYO1FBQ0ksV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbkMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUE5SEQsQ0FBK0IsdUJBQVUsR0E4SHhDO0FBOUhZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZSwgZ2V0Vmlld0J5SWQgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IFN0YWNrTGF5b3V0IH0gZnJvbSAndWkvbGF5b3V0cy9zdGFjay1sYXlvdXQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tICdkYXRhL29ic2VydmFibGUtYXJyYXknO1xuaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnbmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZSc7XG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gJ3VpL2RpYWxvZ3MnO1xuaW1wb3J0ICogYXMgYXBwU2V0dGluZ3MgZnJvbSAnYXBwbGljYXRpb24tc2V0dGluZ3MnO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgKiBhcyBmcmFtZSBmcm9tICd1aS9mcmFtZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL3NoYXJlZC91c2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW5pbWF0aW9uRGVmaW5pdGlvbiB9IGZyb20gXCJ1aS9hbmltYXRpb25cIjtcbmltcG9ydCB7IEFuaW1hdGlvbkN1cnZlIH0gZnJvbSBcInVpL2VudW1zXCI7XG5cbmxldCB1c2VyU2VydmljZTogVXNlclNlcnZpY2U7XG5sZXQgTXlNb2RlbDogVXNlclNldHVwO1xuXG5leHBvcnQgY2xhc3MgVXNlclNldHVwIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHVzZXJTZXJ2aWNlID0gbmV3IFVzZXJTZXJ2aWNlKCk7XG4gICAgICAgIE15TW9kZWwgPSB0aGlzO1xuICAgIH1cblxuICAgIFxuXG4gICAgcHVibGljIGhvdXJseVJhdGU6IG51bWJlcjtcbiAgICBwdWJsaWMgb3ZlcnRpbWVSYXRlOiBudW1iZXI7XG4gICAgcHVibGljIHNhdmluZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBmYW1pbGllcyA9IG5ldyBPYnNlcnZhYmxlQXJyYXkoW10pO1xuICAgIHB1YmxpYyBhZGRpbmdGYW1pbHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwdWJsaWMgYWRkaW5nRmFtaWx5TmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyBhZGRpbmdGYW1pbHlFbWFpbDogc3RyaW5nO1xuXG4gICAgcHVibGljIHNhdmVSYXRlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuaG91cmx5UmF0ZSAmJiB0aGlzLm92ZXJ0aW1lUmF0ZSAmJiB0aGlzLmZhbWlsaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgaG91cmx5UmF0ZTogdGhpcy5ob3VybHlSYXRlLFxuICAgICAgICAgICAgICAgIG92ZXJ0aW1lUmF0ZTogdGhpcy5vdmVydGltZVJhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVzZXJTZXJ2aWNlLnVwZGF0ZVVzZXIoYXJncykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd5YXkhJyk7XG4gICAgICAgICAgICAgICAgZnJhbWUudG9wbW9zdCgpLm5hdmlnYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogJy92aWV3cy9ob21lL2hvbWUnLFxuICAgICAgICAgICAgICAgICAgICBiYWNrc3RhY2tWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySGlzdG9yeTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmZhbWlsaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdQbGVhc2UgZW50ZXIgYXQgbGVhc3Qgb25lIGZhbWlseS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBlbnRlciB5b3VyIGhvdXJseSByYXRlIGFuZCBvdmVydGltZSByYXRlLiBJZiB0aGV5IGFyZSB0aGUgc2FtZSwgZW50ZXIgaXQgdHdpY2UhJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBzaG93QWRkRmFtaWx5KCkge1xuICAgICAgICBsZXQgdmlldyA9IGZyYW1lLnRvcG1vc3QoKS5jdXJyZW50UGFnZTsgICAgXG4gICAgICAgIGxldCBkaW1tZXI6U3RhY2tMYXlvdXQgPSA8U3RhY2tMYXlvdXQ+Z2V0Vmlld0J5SWQodmlldywgJ2RpbW1lcicpO1xuICAgICAgICBsZXQgcGlja2VyOlN0YWNrTGF5b3V0ID0gPFN0YWNrTGF5b3V0PmdldFZpZXdCeUlkKHZpZXcsICdjaG9vc2VyX2hvbGRlcicpO1xuICAgICAgICB0aGlzLnNldCgnYWRkaW5nRmFtaWx5JywgdHJ1ZSk7XG4gICAgICAgIGRpbW1lci5vcGFjaXR5ID0gMDtcbiAgICAgICAgZGltbWVyLmFuaW1hdGUoPEFuaW1hdGlvbkRlZmluaXRpb24+e1xuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgICAgICAgICBjdXJ2ZTogQW5pbWF0aW9uQ3VydmUuY3ViaWNCZXppZXIoMC4xLCAwLjEsIDAuMSwgMSlcbiAgICAgICAgfSlcbiAgICAgICAgcGlja2VyLm9wYWNpdHkgPSAwO1xuICAgICAgICBwaWNrZXIuc2NhbGVYID0gLjc7XG4gICAgICAgIHBpY2tlci5zY2FsZVkgPSAuNztcbiAgICAgICAgcGlja2VyLmFuaW1hdGUoPEFuaW1hdGlvbkRlZmluaXRpb24+e1xuICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgIHNjYWxlOiB7eDogMSwgeTogMX0sXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmN1YmljQmV6aWVyKDAuMSwgMC4xLCAwLjEsIDEpXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRGYW1pbHkoKSB7XG4gICAgICAgIGxldCBmYW1pbHlPYmo6YW55ID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5hZGRpbmdGYW1pbHlOYW1lLFxuICAgICAgICAgICAgZW1haWw6IHRoaXMuYWRkaW5nRmFtaWx5RW1haWxcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5jbG9zZUFkZEZhbWlseSgpO1xuICAgICAgICB1c2VyU2VydmljZS5hZGRGYW1pbHkoZmFtaWx5T2JqKS50aGVuKChyZXN1bHQ6YW55KSA9PiB7XG4gICAgICAgICAgICBmYW1pbHlPYmouaWQgPSByZXN1bHQua2V5O1xuICAgICAgICAgICAgdGhpcy5mYW1pbGllcy5wdXNoKGZhbWlseU9iailcbiAgICAgICAgICAgIGxldCB1aWQgPSBKU09OLnBhcnNlKGFwcFNldHRpbmdzLmdldFN0cmluZygndWlkJykpO1xuICAgICAgICAgICAgdXNlclNlcnZpY2UuZ2V0VXNlcih1aWQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdhZGRpbmdGYW1pbHlOYW1lJywgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdhZGRpbmdGYW1pbHlFbWFpbCcsICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2VBZGRGYW1pbHkoKSB7XG4gICAgICAgIGxldCB2aWV3ID0gZnJhbWUudG9wbW9zdCgpLmN1cnJlbnRQYWdlOyAgICBcbiAgICAgICAgbGV0IGRpbW1lcjpTdGFja0xheW91dCA9IDxTdGFja0xheW91dD5nZXRWaWV3QnlJZCh2aWV3LCAnZGltbWVyJyk7XG4gICAgICAgIGxldCBwaWNrZXI6U3RhY2tMYXlvdXQgPSA8U3RhY2tMYXlvdXQ+Z2V0Vmlld0J5SWQodmlldywgJ2Nob29zZXJfaG9sZGVyJyk7XG4gICAgICAgIGRpbW1lci5hbmltYXRlKDxBbmltYXRpb25EZWZpbml0aW9uPntcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmN1YmljQmV6aWVyKDAuMSwgMC4xLCAwLjEsIDEpXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXQoJ2FkZGluZ0ZhbWlseScsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBpY2tlci5hbmltYXRlKDxBbmltYXRpb25EZWZpbml0aW9uPntcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICBzY2FsZToge3g6IC43LCB5OiAuN30sXG4gICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgY3VydmU6IEFuaW1hdGlvbkN1cnZlLmN1YmljQmV6aWVyKDAuMSwgMC4xLCAwLjEsIDEpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHVibGljIGFsZXJ0KCkge1xuICAgICAgICBhbGVydCgnSGknKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRmFtaWx5KGFyZ3MpIHtcbiAgICAgICAgbGV0IGZhbUlkID0gYXJncy5vYmplY3QuaWQ7XG4gICAgICAgIGRpYWxvZ3MuY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIGZhbWlseT8nKS50aGVuKChkZWNpc2lvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGRlY2lzaW9uKSB7XG4gICAgICAgICAgICAgICAgdXNlclNlcnZpY2UudXBkYXRlRmFtaWx5KGZhbUlkLCB7ZGVsZXRlZDogdHJ1ZX0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsZXRlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIE15TW9kZWwuZmFtaWxpZXMuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlkID09IGZhbUlkKSBkZWxldGVJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgTXlNb2RlbC5mYW1pbGllcy5zcGxpY2UoZGVsZXRlSW5kZXgsIDEpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwdWJsaWMga2lsbCgpIHtcbiAgICAgICAgYXBwU2V0dGluZ3MucmVtb3ZlKCd1c2VyRGF0YScpO1xuICAgICAgICBhcHBTZXR0aW5ncy5yZW1vdmUoJ3VpZCcpO1xuICAgICAgICBhcHBTZXR0aW5ncy5yZW1vdmUoJ3VzZXJSZWNvcmRJRCcpO1xuICAgICAgICBmcmFtZS50b3Btb3N0KCkubmF2aWdhdGUoJy92aWV3cy9sb2dpbi9sb2dpbicpO1xuICAgIH1cbn0iXX0=