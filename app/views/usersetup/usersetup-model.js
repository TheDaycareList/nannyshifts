"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var page_1 = require("ui/page");
var observable_1 = require("data/observable");
var observable_array_1 = require("data/observable-array");
var dialogs = require("ui/dialogs");
var appSettings = require("application-settings");
var frame = require("ui/frame");
var user_service_1 = require("../shared/user.service");
var enums_1 = require("ui/enums");
var userService;
var MyModel;
var UserSetup = (function (_super) {
    __extends(UserSetup, _super);
    function UserSetup() {
        var _this = _super.call(this) || this;
        _this.user = JSON.parse(appSettings.getString('userData'));
        _this.hourlyRate = _this.user.hourlyRate ? parseFloat(_this.user.hourlyRate) : '';
        _this.overtimeRate = _this.user.overtimeRate ? parseFloat(_this.user.overtimeRate) : '';
        _this.first_name = _this.user.first_name;
        _this.last_name = _this.user.last_name;
        _this.saving = false;
        _this.families = new observable_array_1.ObservableArray([]);
        _this.addingFamily = false;
        userService = new user_service_1.UserService();
        MyModel = _this;
        var uid = JSON.parse(appSettings.getString('uid'));
        console.log(uid);
        console.dir(_this.user.families);
        if (_this.user.families) {
            for (var x in _this.user.families) {
                _this.families.push(_this.user.families[x]);
            }
        }
        if (!_this.families.length) {
            _this.families.push({
                name: "None entered...",
                email: false
            });
        }
        return _this;
    }
    UserSetup.prototype.saveRates = function () {
        if (this.hourlyRate && this.overtimeRate && this.families.length && this.families.getItem(0).email && this.first_name && this.last_name) {
            var args = {
                hourlyRate: this.hourlyRate,
                overtimeRate: this.overtimeRate,
                first_name: this.first_name,
                last_name: this.last_name
            };
            userService.updateUser(args).then(function (result) {
                console.log('yay!');
                frame.topmost().navigate({
                    moduleName: '/views/home/home',
                    backstackVisible: false,
                    animated: true,
                    clearHistory: true
                });
            });
        }
        else {
            if (!this.hourlyRate || !this.overtimeRate) {
                alert('Please enter your hourly rate and overtime rate. If they are the same, enter it twice!');
            }
            else if (!this.first_name || !this.last_name) {
                alert('Please enter your name, we use it when emailing your families on your behalf.');
            }
            else if (!this.families.length || !this.families.getItem(0).email) {
                alert('Please enter at least one family.');
            }
        }
    };
    UserSetup.prototype.showAddFamily = function () {
        var view = frame.topmost().currentPage;
        var dimmer = page_1.getViewById(view, 'dimmer');
        var picker = page_1.getViewById(view, 'chooser_holder');
        this.set('addingFamily', true);
        dimmer.opacity = 0;
        dimmer.animate({
            opacity: 1,
            duration: 500,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
        picker.opacity = 0;
        picker.scaleX = .7;
        picker.scaleY = .7;
        picker.animate({
            opacity: 1,
            scale: { x: 1, y: 1 },
            duration: 300,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
    };
    UserSetup.prototype.addFamily = function () {
        var _this = this;
        var familyObj = {
            name: this.addingFamilyName,
            email: this.addingFamilyEmail
        };
        this.closeAddFamily();
        userService.addFamily(familyObj).then(function (result) {
            familyObj.id = result.key;
            if (_this.families.length && !_this.families.getItem(0).email)
                _this.families.pop();
            _this.families.push(familyObj);
            var uid = JSON.parse(appSettings.getString('uid'));
            userService.getUser(uid).then(function () {
                _this.set('addingFamilyName', '');
                _this.set('addingFamilyEmail', '');
            });
        });
    };
    UserSetup.prototype.closeAddFamily = function () {
        var _this = this;
        var view = frame.topmost().currentPage;
        var dimmer = page_1.getViewById(view, 'dimmer');
        var picker = page_1.getViewById(view, 'chooser_holder');
        dimmer.animate({
            opacity: 0,
            duration: 500,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        }).then(function () {
            _this.set('addingFamily', false);
        });
        picker.animate({
            opacity: 0,
            scale: { x: .7, y: .7 },
            duration: 300,
            curve: enums_1.AnimationCurve.cubicBezier(0.1, 0.1, 0.1, 1)
        });
    };
    UserSetup.prototype.alert = function () {
        alert('Hi');
    };
    UserSetup.prototype.removeFamily = function (args) {
        var famId = args.object.id;
        dialogs.confirm('Are you sure you want to remove this family?').then(function (decision) {
            if (decision) {
                userService.updateFamily(famId, { deleted: true }).then(function (result) {
                    var deleteIndex;
                    MyModel.families.forEach(function (element, index) {
                        if (element.id == famId)
                            deleteIndex = index;
                    });
                    MyModel.families.splice(deleteIndex, 1);
                    if (!MyModel.families.length) {
                        MyModel.families.push({
                            name: "None entered...",
                            email: false
                        });
                    }
                });
            }
        });
    };
    UserSetup.prototype.kill = function () {
        appSettings.remove('userData');
        appSettings.remove('uid');
        appSettings.remove('userRecordID');
        frame.topmost().navigate('/views/login/login');
    };
    return UserSetup;
}(observable_1.Observable));
exports.UserSetup = UserSetup;
//# sourceMappingURL=data:application/json;base64,